#1 矩阵题 滑动偏移量
int[][] mat = new int[m][];
for(int i = 0; i < mat.Length; i++) mat[i] = new int[n];
foreach(var arr in mat) Array.Fill(arr, -1);
        
int[] dx = {-1, 0, 1, 0}, dy = {0, 1, 0, -1};
int x = 0, y = 0, d = 1;
for(int i = 0; i < n * m && head != null; i++){
	mat[x][y] = head.val;
	int a = x + dx[d], b = y + dy[d];
	if(a < 0 || b < 0 || a >= m || b >= n || mat[a][b] != -1){
		d = (d + 1) % 4;
		a = x + dx[d];
		b = y + dy[d];
	}
	x = a;
	y = b;
	head = head.next;
}
return mat;

#2 差分
class Difference {
    // 差分数组
    private int[] diff;

    public Difference(int[] nums) {
        assert nums.length > 0;
        diff = new int[nums.length];
        // 构造差分数组
        diff[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            diff[i] = nums[i] - nums[i - 1];
        }
    }

    /* 给闭区间 [i,j] 增加 val（可以是负数）*/
    public void increment(int i, int j, int val) {
        diff[i] += val;
        if (j + 1 < diff.length) {
            diff[j + 1] -= val;
        }
    }

    public int[] result() {
        int[] res = new int[diff.length];
        // 根据差分数组构造结果数组
        res[0] = diff[0];
        for (int i = 1; i < diff.length; i++) {
            res[i] = res[i - 1] + diff[i];
        }
        return res;
    }
}

#3 前缀
class PrefixSum {
    // 前缀和数组
    private int[] prefix;

    /* 输入一个数组，构造前缀和 */
    public PrefixSum(int[] nums) {
        prefix = new int[nums.length + 1];
        // 计算 nums 的累加和
        for (int i = 0; i < prefix.length; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
    }

    /* 查询闭区间 [i, j] 的累加和 */
    public int query(int i, int j) {
        return prefix[j + 1] - prefix[i];
    }
}

#4 01BFS
public class Solution {
    int[] dir_x = new int[]{1, -1, 0, 0};
    int[] dir_y = new int[]{0, 0, 1, -1};

    public int MinimumObstacles(int[][] grid) {
        int m = grid.Length, n = grid[0].Length;
        var map = new int[m][];
        for(var i = 0; i < m; i++){
            map[i] = new int[grid[i].Length];
            Array.Fill(map[i], int.MaxValue);
        }

        map[0][0] = 0;
        var Bfs = new LinkedList<int[]>();
        Bfs.AddFirst(new int[]{0, 0});
        while (Bfs.Count > 0) {
            var pairs = Bfs.First();
            Bfs.RemoveFirst();
            int x = pairs[0], y = pairs[1];
            for(int i = 0; i < 4; i++){
                int dx = x + dir_x[i], dy = y + dir_y[i];
                if (0 <= dx && dx < m && 0 <= dy && dy < n) {
                    ...
                    if (map[x][y] + g < map[dx][dy]) {
                        map[dx][dy] = map[x][y] + ...;
                        if (...) Bfs.AddFirst(new int[]{dx, dy});
                        else Bfs.AddLast(new int[]{dx, dy});
                    }
                }
            }
        }
        return map[m - 1][n - 1];
    }
}

#5 线段树 动态开点
class Node {
	// ls 和 rs 分别代表当前节点的左右子节点在 tr 的下标
      // val 代表当前节点有多少数
      // add 为懒标记
      int ls, rs, add, val;
}

Class SegTree {
    int N = (int)1e9, M = 120010, cnt = 1;
    Node[] tr = new Node[M];
    void update(int u, int lc, int rc, int l, int r, int v) {
        if (l <= lc && rc <= r) {
            tr[u].val += (rc - lc + 1) * v;
            tr[u].add += v;
            return ;
        }
        lazyCreate(u);
        pushdown(u, rc - lc + 1);
        int mid = lc + rc >> 1;
        if (l <= mid) update(tr[u].ls, lc, mid, l, r, v);
        if (r > mid) update(tr[u].rs, mid + 1, rc, l, r, v);
        pushup(u);
    }
    int query(int u, int lc, int rc, int l, int r) {
        if (l <= lc && rc <= r) return tr[u].val;
        lazyCreate(u);
        pushdown(u, rc - lc + 1);
        int mid = lc + rc >> 1, ans = 0;
        if (l <= mid) ans = query(tr[u].ls, lc, mid, l, r);
        if (r > mid) ans += query(tr[u].rs, mid + 1, rc, l, r);
        return ans;
    }
    void lazyCreate(int u) {
        if (tr[u] == null) tr[u] = new Node();
        if (tr[u].ls == 0) {
            tr[u].ls = ++cnt;
            tr[tr[u].ls] = new Node();
        }
        if (tr[u].rs == 0) {
            tr[u].rs = ++cnt;
            tr[tr[u].rs] = new Node();
        }
    }
    void pushdown(int u, int len) {
        tr[tr[u].ls].add += tr[u].add; tr[tr[u].rs].add += tr[u].add;
        tr[tr[u].ls].val += (len - len / 2) * tr[u].add; tr[tr[u].rs].val += len / 2 * tr[u].add;
        tr[u].add = 0;
    }
    void pushup(int u) {
        tr[u].val = tr[tr[u].ls].val + tr[tr[u].rs].val;
    }
}

非动态开点
 /**
 * 线段树能解决的问题：
 *          1.区间查询
 *          2.单点修改
 *          3.区间修改
 */
public class SegTree {
    public int max;//假设区间长度为1 ~ MAX
    public int[] add;//定义为区间长度的四倍
    public int[] arr;//存原数组的数据
    public int[] sum;

    public SegTree(int n){
        max = n + 1;
        sum = new int[max << 4];
        add = new int[max << 2];
        arr = new int[max + 1];
    }

    //将子区间的数据整合
    public void PushUp(int id){
        sum[id] = sum[id << 1] + sum[id << 1 | 1];
    }
    //初始建立树
    public void Build(int l, int r, int rt){
        if(l == r){ //到达了叶结点
            sum[rt] = arr[l];
            return;
        }
        int m = (l + r) >> 1;
        //左右递归
        Build(l, m, rt << 1);
        Build(m + 1, r, rt << 1 | 1);
        //合并子区间的信息
        PushUp(rt);
    }
    //单点修改，这里以A[L]修改为C为例
    public void UpdateOne(int nd, int val, int l, int r, int rt){
        if(l == r){
            sum[rt] += val;
            return;
        }
        int m = (r + l) >> 1;
        //选择合适的更新区间
        if(nd <= m) UpdateOne(nd, val, l, m, rt << 1);
        else UpdateOne(nd, val, m + 1, r, rt << 1 | 1);
        //合并子区间
        PushUp(rt);
    }
    //下推标记,第一次修改不会起到作用，只有后面涉及到更深的修改或查询时，将会释放懒标记
    public void PushDown(int rt, int ln, int rn)
    {
        if(add[rt] > 0)
        {
            //下推
            add[rt << 1] += add[rt];
            add[rt << 1 | 1] += add[rt];
            //修改sum
            sum[rt << 1] += add[rt] * ln;
            sum[rt << 1 | 1] += add[rt] * rn;
            //消除本节点标记
            add[rt] = 0;
        }
    }
    //区间修改
    public void Update(int L, int R, int l, int r, int k, int rt){
        //L, R 表示要修改的区间, k 为 加数
        //l, r, rt为当前节点所存储的区间以及节点的编号
        //L到R范围内，全部加上C，当前任务范围：从l, 到 r(全局范围)，当前任务根节点-rt
        if(l >= L && r <= R){ //全包住了，懒缓存
            sum[rt] += (r - l + 1) * k;
            add[rt] += k;
            return;
        }
        int m = (l + r) / 2; //没包住，需要下发
        PushDown(rt, m - l + 1, r - m);
        if(L <= m) Update(L, R, l, m, k, rt << 1);
        if(m < R) Update(L, R, m + 1, r, k, rt << 1 | 1);
        PushUp(rt); //任务处理完了，求本届点的和
    }
    //区间查询
    public int Query(int L, int R, int l, int r, int rt){
        if(l >= L && r <= R)
            return sum[rt];
        int m = (l + r) >> 1;
        //下推标记
        PushDown(rt, m - l + 1, r - m);
        int ans = 0;
        if(L <= m) ans += Query(L, R, l, m, rt << 1);//递归左子区间
        if(R > m) ans += Query(L, R, m + 1, r, rt << 1 | 1);//递归右子区间
        return ans;
    }
}

树状数组
..{
    int[]tr;
    int n;
    public int Lowbit(int x) {
        return x & -x;
    }

    public void Add(int x, int u) {
        for (int i = x; i <= n; i += Lowbit(i)) 
            tr[i] += u;
    }

    public int Query(int x) {
        int ans = 0;
        for (int i = x; i > 0; i -= Lowbit(i)) 
            ans += tr[i];
        return ans;
    }

    public int QueryAll(int x, int y){
        return Query(x) - Query(y - 1);
    }
}

#6 欧拉筛
List<int> list = new();
int[] pr = new int[n + 1];

for(int i = 2; i <= n; i++){
   if((pr[i] & 1) == 0){
      pr[i]++;
      list.Add(i);
   }
   foreach(var p in list){
      if(p * i > n)
	   break;
	pr[p * i]++;
	if(i % p == 0)
	   break;
   }
}

#7 并查集
{
    public int Find(int x) { //get node
        return x == nodes[x] ? x : (nodes[x] = Find(nodes[x]));
    }

    public void Union(int x, int y) { //combine node
        int rx = Find(x);
        int ry = Find(y);
        if (rx != ry)
            nodes[ry] = rx;
    }

    public int[] Relative(int x){ //count node
        int[] arr = new int[x];
        for(int i = 0; i < x; i++)
            arr[Find(i)]++;
        return arr;
    }
}
